{% raw %}
# Copyright 2018 Juniper Networks, Inc. All rights reserved.
# Licensed under the Juniper Networks Script Software License (the "License").
# You may not use this script file except in compliance with the License, which is located at
# http://www.juniper.net/support/legal/scriptlicense/
# Unless required by applicable law or otherwise agreed to in writing by the parties,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# List of nodes to use as control host role
# Each list item contains a set of variables which can be referenced
# with "{{ host.<variable> }}" in control_host_nodes_network_config below.
# Other ad-hoc variables can be added as needed.
#    name: name of a node in the inventory (string)
#    hostname: hostname to assign the node after it is imaged (string)
#    control_ip_netmask: static CIDR address on Control Plane network.
#                        Choose a value outside the DHCP range. (string)
#    dns_server1,dns_server2: dns server addresses (string)
#    max_mtu: The largest MTU supported by an interface
{% endraw %}
{% set control_host_count = namespace(value=0) %}
{% set control_ip = namespace(value=0) %}
{% set control_ip.value = control_ip.value + 5 %}

control_host_nodes:
{% for item in controlhost %}
  - name: "{{ 'controlhost' + control_host_count.value|string }}"
    control_ip_netmask: "{{ '192.168.' + vlan_cc['native_vlan']|string + '.' + control_ip.value|string + '/24' }}"
    dns_server1: "10.219.2.101"
    dns_server2: "10.219.2.102"
    dns_server3: "8.8.8.8"
    max_mtu: 1500
{% set control_ip.value = control_ip.value + 1 %}
{% set control_host_count.value =  control_host_count.value + 1 %}
{% endfor %}

# Template for network layout on all control host nodes
# This follows the os-net-config syntax
# See https://github.com/openstack/os-net-config/tree/stable/queens

control_host_nodes_network_config:
  - type: ovs_bridge
    name: br-{{ controlhost[0]['int10g2'] }}
    use_dhcp: false
    {% raw -%}
    mtu: "{{ overcloud['network']['control']['mtu'] }}"
    addresses:
    -
      ip_netmask: "{{ host.control_ip_netmask }}"
    routes:
      -
        next_hop: "{{ overcloud['network']['control']['gateway'] }}"
        default: true
    dns_servers:
      - "{{ host.dns_server1 }}"
      - "{{ host.dns_server2 }}"
      - "{{ host.dns_server3 }}"
    {% endraw -%}
    members:
      - type: interface
        name: {{ controlhost[0]['int10g2'] }}
        use_dhcp: false
        {% raw -%}
        mtu: "{{ overcloud['network']['control']['mtu'] }}"
  {% endraw -%}
  - type: ovs_bridge
    name: br-{{ controlhost[0]['int10g3'] }}
    use_dhcp: false
    {% raw -%}
    mtu: "{{ host.max_mtu }}"
    {% endraw -%}
    members:
      -
        type: interface
        name: {{ controlhost[0]['int10g3'] }}
        use_dhcp: false
        {% raw -%}
        mtu: "{{ host.max_mtu }}"
{% endraw -%}

control_hosts:
  # The mapping from control host interfaces to the control VM interfaces
  # The first interface (eth0) must always be the Control Plane network to allow the VM to PXE boot
  # VM interface names must be sequential with no gaps (e.g. eth0, eth1, eth2,...)
  vm_interfaces:
    - interface: eth0
      bridge: br-{{ controlhost[0]['int10g2'] }}
    - interface: eth1
      bridge: br-{{ controlhost[0]['int10g3'] }}